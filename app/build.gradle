apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'io.objectbox'

android {
    compileSdkVersion 28
    buildToolsVersion "28.0.2"

    defaultConfig {
        applicationId "knez.assdroid"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 13
        versionName "1.0.0-zoro"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField 'String', 'GIT_SHA', "\"${gitSha()}\""
        buildConfigField 'long', 'GIT_TIMESTAMP', "${gitTimestamp()}L"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [appName: "knez.assdroid.App"]

            buildConfigField "boolean", "DEBUG_LOG_CURRENT_THREAD", "false"
            buildConfigField "boolean", "DEBUG_LOG_FRAGMENT_STATE", "false"
            buildConfigField "boolean", "STRICT_MODE", "false"
        }
        debug {
            manifestPlaceholders = [appName: "knez.assdroid.DebugApp"]

            buildConfigField "boolean", "DEBUG_LOG_CURRENT_THREAD", "true"
            buildConfigField "boolean", "DEBUG_LOG_FRAGMENT_STATE", "true"
            buildConfigField "boolean", "STRICT_MODE", "true"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "com.android.support:appcompat-v7:${rootProject.supportLibVersion}"
    implementation "com.android.support:recyclerview-v7:${rootProject.supportLibVersion}"
    implementation "com.android.support:design:${rootProject.supportLibVersion}"
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation "com.android.support:support-annotations:${rootProject.supportLibVersion}"

    implementation 'com.jakewharton.timber:timber:4.6.0'
    implementation 'com.jakewharton:butterknife:8.8.1'
    implementation 'info.android15.solid:collections:3.0.1'
    implementation 'com.jakewharton.threetenabp:threetenabp:1.0.5'
    implementation 'com.joanzapata.iconify:android-iconify-fontawesome:2.2.2'
    implementation 'com.joanzapata.iconify:android-iconify-material:2.2.2'
    implementation 'com.google.code.gson:gson:2.8.2'
    implementation 'io.gsonfire:gson-fire:1.8.2'
    debugImplementation 'com.facebook.stetho:stetho:1.5.0'

    implementation("com.mikepenz:materialdrawer:6.0.7@aar") {
        transitive = true
    }

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.5.4'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.4'
    testImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.4'

    implementation 'com.jakewharton:process-phoenix:2.0.0'

    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
    implementation 'com.google.dagger:dagger:2.14.1'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.14.1'
    implementation 'com.google.dagger:dagger-android:2.14.1'
    implementation 'com.google.dagger:dagger-android-support:2.14.1'
    annotationProcessor 'com.google.dagger:dagger-android-processor:2.14.1'
    androidTestAnnotationProcessor 'com.google.dagger:dagger-compiler:2.14.1'
    androidTestAnnotationProcessor 'com.google.dagger:dagger-android-processor:2.14.1'
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.1@aar') {
        transitive = true;
    }
}

configurations.all {
    resolutionStrategy.force "com.android.support:support-v4:${rootProject.supportLibVersion}"
}



def gitSha() {
    def p = 'git rev-parse --short HEAD'.execute([], project.rootDir)
    p.waitFor()
    if (p.exitValue() != 0) {
        throw new RuntimeException(p.errorStream.text)
    }

    return p.text.trim()
}

def gitTimestamp() {
    def p = 'git log -n 1 --format=%at'.execute([], rootDir)
    p.waitFor()
    if (p.exitValue() != 0) {
        throw new RuntimeException(p.errorStream.text)
    }

    return p.text.trim()
}